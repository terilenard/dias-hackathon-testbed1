.\" Automatically generated by Pandoc 2.5
.\"
.TH "tpm2_verifysignature" "1" "" "tpm2\-tools" "General Commands Manual"
.hy
.SH NAME
.PP
\f[B]tpm2_verifysignature\f[R](1) \- Validates a signature using the
TPM.
.SH SYNOPSIS
.PP
\f[B]tpm2_verifysignature\f[R] [\f[I]OPTIONS\f[R]]
.SH DESCRIPTION
.PP
\f[B]tpm2_verifysignature\f[R](1) \- Uses loaded keys to validate a
signature on a message with the message digest passed to the TPM.
If the signature check succeeds, then the TPM will produce a
\f[B]TPMT_TK_VERIFIED\f[R].
Otherwise, the TPM shall return \f[B]TPM_RC_SIGNATURE\f[R].
If object references an asymmetric key, only the public portion of the
key needs to be loaded.
If object references a symmetric key, both the public and private
portions need to be loaded.
.SH OPTIONS
.IP \[bu] 2
\f[B]\-c\f[R], \f[B]\-\-key\-context\f[R]=\f[I]OBJECT\f[R]:
.RS 2
.PP
Context object for the key context used for the operation.
Either a file or a handle number.
See section \[lq]Context Object Format\[rq].
.RE
.IP \[bu] 2
\f[B]\-g\f[R], \f[B]\-\-hash\-algorithm\f[R]=\f[I]ALGORITHM\f[R]:
.RS 2
.PP
The hash algorithm used to digest the message.
Algorithms should follow the \[lq]formatting standards\[rq], see section
\[lq]Algorithm Specifiers\[rq].
Also, see section \[lq]Supported Hash Algorithms\[rq] for a list of
supported hash algorithms.
.RE
.IP \[bu] 2
\f[B]\-m\f[R], \f[B]\-\-message\f[R]=\f[I]FILE\f[R]:
.RS 2
.PP
The message file, containing the content to be digested.
.RE
.IP \[bu] 2
\f[B]\-d\f[R], \f[B]\-\-digest\f[R]=\f[I]FILE\f[R]:
.RS 2
.PP
The input hash file, containing the hash of the message.
If this option is selected, then the message (\f[B]\-m\f[R]) and
algorithm (\f[B]\-g\f[R]) options do not need to be specified.
.RE
.IP \[bu] 2
\f[B]\-s\f[R], \f[B]\-\-signature\f[R]=\f[I]FILE\f[R]:
.RS 2
.PP
The input signature file of the signature to be validated.
.RE
.IP \[bu] 2
\f[B]\-f\f[R], \f[B]\-\-format\f[R]=\f[I]FORMAT\f[R]:
.RS 2
.PP
Set the input signature file to a specified format.
The default is the tpm2.0 TPMT_SIGNATURE data format, however different
schemes can be selected if the data came from an external source like
OpenSSL.
The tool currently only supports rsassa.
.RE
.IP \[bu] 2
\f[B]\-t\f[R], \f[B]\-\-ticket\f[R]=\f[I]FILE\f[R]:
.RS 2
.PP
The ticket file to record the validation structure.
.RE
.SS References
.SH Context Object Format
.PP
The type of a context object, whether it is a handle or file name, is
determined according to the following logic \f[I]in\-order\f[R]:
.IP \[bu] 2
If the argument is a file path, then the file is loaded as a restored
TPM transient object.
.IP \[bu] 2
If the argument is a \f[I]prefix\f[R] match on one of:
.RS 2
.IP \[bu] 2
owner: the owner hierarchy
.IP \[bu] 2
platform: the platform hierarchy
.IP \[bu] 2
endorsement: the endorsement hierarchy
.IP \[bu] 2
lockout: the lockout control persistent object
.RE
.IP \[bu] 2
If the argument argument can be loaded as a number it will be treat as a
handle, e.g.\ 0x81010013 and used directly._OBJECT_.
.SH Algorithm Specifiers
.PP
Options that take algorithms support \[lq]nice\-names\[rq].
.PP
There are two major algorithm specification string classes, simple and
complex.
Only certain algorithms will be accepted by the TPM, based on usage and
conditions.
.SS Simple specifiers
.PP
These are strings with no additional specification data.
When creating objects, non\-specified portions of an object are assumed
to defaults.
You can find the list of known \[lq]Simple Specifiers Below\[rq].
.SS Asymmetric
.IP \[bu] 2
rsa
.IP \[bu] 2
ecc
.SS Symmetric
.IP \[bu] 2
aes
.IP \[bu] 2
camellia
.SS Hashing Algorithms
.IP \[bu] 2
sha1
.IP \[bu] 2
sha256
.IP \[bu] 2
sha384
.IP \[bu] 2
sha512
.IP \[bu] 2
sm3_256
.IP \[bu] 2
sha3_256
.IP \[bu] 2
sha3_384
.IP \[bu] 2
sha3_512
.SS Keyed Hash
.IP \[bu] 2
hmac
.IP \[bu] 2
xor
.SS Signing Schemes
.IP \[bu] 2
rsassa
.IP \[bu] 2
rsapss
.IP \[bu] 2
ecdsa
.IP \[bu] 2
ecdaa
.IP \[bu] 2
ecschnorr
.SS Asymmetric Encryption Schemes
.IP \[bu] 2
oaep
.IP \[bu] 2
rsaes
.IP \[bu] 2
ecdh
.SS Modes
.IP \[bu] 2
ctr
.IP \[bu] 2
ofb
.IP \[bu] 2
cbc
.IP \[bu] 2
cfb
.IP \[bu] 2
ecb
.SS Misc
.IP \[bu] 2
null
.SS Complex Specifiers
.PP
Objects, when specified for creation by the TPM, have numerous
algorithms to populate in the public data.
Things like type, scheme and asymmetric details, key size, etc.
Below is the general format for specifying this data:
\f[C]<type>:<scheme>:<symmetric\-details>\f[R]
.SS Type Specifiers
.PP
This portion of the complex algorithm specifier is required.
The remaining scheme and symmetric details will default based on the
type specified and the type of the object being created.
.IP \[bu] 2
aes \- Default AES: aes128
.IP \[bu] 2
aes128\f[C]<mode>\f[R] \- 128 bit AES with optional mode
(\f[I]ctr\f[R]|\f[I]ofb\f[R]|\f[I]cbc\f[R]|\f[I]cfb\f[R]|\f[I]ecb\f[R]).
If mode is not specified, defaults to \f[I]null\f[R].
.IP \[bu] 2
aes192\f[C]<mode>\f[R] \- Same as aes128\f[C]<mode>\f[R], except for a
192 bit key size.
.IP \[bu] 2
aes256\f[C]<mode>\f[R] \- Same as aes128\f[C]<mode>\f[R], except for a
256 bit key size.
.IP \[bu] 2
ecc \- Elliptical Curve, defaults to ecc256.
.IP \[bu] 2
ecc192 \- 192 bit ECC
.IP \[bu] 2
ecc224 \- 224 bit ECC
.IP \[bu] 2
ecc256 \- 256 bit ECC
.IP \[bu] 2
ecc384 \- 384 bit ECC
.IP \[bu] 2
ecc521 \- 521 bit ECC
.IP \[bu] 2
rsa \- Default RSA: rsa2048
.IP \[bu] 2
rsa1024 \- RSA with 1024 bit keysize.
.IP \[bu] 2
rsa2048 \- RSA with 2048 bit keysize.
.IP \[bu] 2
rsa4096 \- RSA with 4096 bit keysize.
.SS Scheme Specifiers
.PP
Next, is an optional field, it can be skipped.
.PP
Schemes are usually \f[B]Signing Schemes\f[R] or \f[B]Asymmetric
Encryption Schemes\f[R].
Most signing schemes take a hash algorithm directly following the
signing scheme.
If the hash algorithm is missing, it defaults to \f[I]sha256\f[R].
Some take no arguments, and some take multiple arguments.
.SS Hash Optional Scheme Specifiers
.PP
These scheme specifiers are followed by a dash and a valid hash
algorithm, For example: \f[C]oaep\-sha256\f[R].
.IP \[bu] 2
oaep
.IP \[bu] 2
ecdh
.IP \[bu] 2
rsassa
.IP \[bu] 2
rsapss
.IP \[bu] 2
ecdsa
.IP \[bu] 2
ecschnorr
.SS Multiple Option Scheme Specifiers
.PP
This scheme specifier is followed by a count (max size UINT16) then
folloed by a dash(\-) and a valid hash algorithm.
* ecdaa For example, ecdaa4\-sha256.
If no count is specified, it defaults to 4.
.SS No Option Scheme Specifiers
.PP
This scheme specifier takes NO arguments.
* rsaes
.SS Symmetric Details Specifiers
.PP
This field is optional, and defaults based on the \f[I]type\f[R] of
object being created and it\[cq]s attributes.
Generally, any valid \f[B]Symmetric\f[R] specifier from the \f[B]Type
Specifiers\f[R] list should work.
If not specified, an asymmetric objects symmetric details defaults to
\f[I]aes128cfb\f[R].
.SS Examples
.SS Create an rsa2048 key with an rsaes asymmetric encryption scheme
.PP
\f[C]tpm2_create \-C parent.ctx \-G rsa2048:rsaes \-u key.pub \-r key.priv\f[R]
.SS Create an ecc256 key with an ecdaa signing scheme with a count of 4 and sha384 hash
.PP
\f[C]/tpm2_create \-C parent.ctx \-G ecc256:ecdaa4\-sha384 \-u key.pub \-r key.priv\f[R]
cryptographic algorithms \f[I]ALGORITHM\f[R].
.SH COMMON OPTIONS
.PP
This collection of options are common to many programs and provide
information that many users may expect.
.IP \[bu] 2
\f[B]\-h\f[R], \f[B]\-\-help=[man|no\-man]\f[R]: Display the tools
manpage.
By default, it attempts to invoke the manpager for the tool, however, on
failure will output a short tool summary.
This is the same behavior if the \[lq]man\[rq] option argument is
specified, however if explicit \[lq]man\[rq] is requested, the tool will
provide errors from man on stderr.
If the \[lq]no\-man\[rq] option if specified, or the manpager fails, the
short options will be output to stdout.
.RS 2
.PP
To successfully use the manpages feature requires the manpages to be
installed or on \f[I]MANPATH\f[R], See man(1) for more details.
.RE
.IP \[bu] 2
\f[B]\-v\f[R], \f[B]\-\-version\f[R]: Display version information for
this tool, supported tctis and exit.
.IP \[bu] 2
\f[B]\-V\f[R], \f[B]\-\-verbose\f[R]: Increase the information that the
tool prints to the console during its execution.
When using this option the file and line number are printed.
.IP \[bu] 2
\f[B]\-Q\f[R], \f[B]\-\-quiet\f[R]: Silence normal tool output to
stdout.
.IP \[bu] 2
\f[B]\-Z\f[R], \f[B]\-\-enable\-errata\f[R]: Enable the application of
errata fixups.
Useful if an errata fixup needs to be applied to commands sent to the
TPM.
Defining the environment TPM2TOOLS_ENABLE_ERRATA is equivalent.
information many users may expect.
.SH TCTI Configuration
.PP
The TCTI or \[lq]Transmission Interface\[rq] is the communication
mechanism with the TPM.
TCTIs can be changed for communication with TPMs across different
mediums.
.PP
To control the TCTI, the tools respect:
.IP "1." 3
The command line option \f[B]\-T\f[R] or \f[B]\-\-tcti\f[R]
.IP "2." 3
The environment variable: \f[I]TPM2TOOLS_TCTI\f[R].
.PP
\f[B]Note:\f[R] The command line option always overrides the environment
variable.
.PP
The current known TCTIs are:
.IP \[bu] 2
tabrmd \- The resource manager, called
tabrmd (https://github.com/tpm2-software/tpm2-abrmd).
Note that tabrmd and abrmd as a tcti name are synonymous.
.IP \[bu] 2
mssim \- Typically used for communicating to the TPM software simulator.
.IP \[bu] 2
device \- Used when talking directly to a TPM device file.
.IP \[bu] 2
none \- Do not initalize a connection with the TPM.
Some tools allow for off\-tpm options and thus support not using a TCTI.
Tools that do not support it will error when attempted to be used
without a TCTI connection.
Does not support \f[I]ANY\f[R] options and \f[I]MUST BE\f[R] presented
as the exact text of \[lq]none\[rq].
.PP
The arguments to either the command line option or the environment
variable are in the form:
.PP
\f[C]<tcti\-name>:<tcti\-option\-config>\f[R]
.PP
Specifying an empty string for either the \f[C]<tcti\-name>\f[R] or
\f[C]<tcti\-option\-config>\f[R] results in the default being used for
that portion respectively.
.SS TCTI Defaults
.PP
When a TCTI is not specified, the default TCTI is searched for using
\f[I]dlopen(3)\f[R] semantics.
The tools will search for \f[I]tabrmd\f[R], \f[I]device\f[R] and
\f[I]mssim\f[R] TCTIs \f[B]IN THAT ORDER\f[R] and \f[B]USE THE FIRST ONE
FOUND\f[R].
You can query what TCTI will be chosen as the default by using the
\f[B]\-v\f[R] option to print the version information.
The \[lq]default\-tcti\[rq] key\-value pair will indicate which of the
aforementioned TCTIs is the default.
.SS Custom TCTIs
.PP
Any TCTI that implements the dynamic TCTI interface can be loaded.
The tools internally use \f[I]dlopen(3)\f[R], and the raw
\f[I]tcti\-name\f[R] value is used for the lookup.
Thus, this could be a path to the shared library, or a library name as
understood by \f[I]dlopen(3)\f[R] semantics.
.SH TCTI OPTIONS
.PP
This collection of options are used to configure the various known TCTI
modules available:
.IP \[bu] 2
\f[B]device\f[R]: For the device TCTI, the TPM character device file for
use by the device TCTI can be specified.
The default is \f[I]/dev/tpm0\f[R].
.RS 2
.PP
Example: \f[B]\-T device:/dev/tpm0\f[R] or \f[B]export
\f[BI]TPM2TOOLS_TCTI\f[B]=\[lq]device:/dev/tpm0\[rq]\f[R]
.RE
.IP \[bu] 2
\f[B]mssim\f[R]: For the mssim TCTI, the domain name or IP address and
port number used by the simulator can be specified.
The default are 127.0.0.1 and 2321.
.RS 2
.PP
Example: \f[B]\-T mssim:host=localhost,port=2321\f[R] or \f[B]export
\f[BI]TPM2TOOLS_TCTI\f[B]=\[lq]mssim:host=localhost,port=2321\[rq]\f[R]
.RE
.IP \[bu] 2
\f[B]abrmd\f[R]: For the abrmd TCTI, the configuration string format is
a series of simple key value pairs separated by a `,' character.
Each key and value string are separated by a `=' character.
.RS 2
.IP \[bu] 2
TCTI abrmd supports two keys:
.RS 2
.IP "1." 3
`bus_name' : The name of the tabrmd service on the bus (a string).
.IP "2." 3
`bus_type' : The type of the dbus instance (a string) limited to
`session' and `system'.
.RE
.PP
Specify the tabrmd tcti name and a config string of
\f[C]bus_name=com.example.FooBar\f[R]:
.IP
.nf
\f[C]
\[rs]\-\-tcti=tabrmd:bus_name=com.example.FooBar
\f[R]
.fi
.PP
Specify the default (abrmd) tcti and a config string of
\f[C]bus_type=session\f[R]:
.IP
.nf
\f[C]
\[rs]\-\-tcti:bus_type=session
\f[R]
.fi
.PP
\f[B]NOTE\f[R]: abrmd and tabrmd are synonymous.
the various known TCTI modules.
# Signature Format Specifiers
.RE
.PP
Format selection for the signature output file.
\f[B]tss\f[R] (the default) will output a binary blob according to the
TPM 2.0 specification and any potential compiler padding.
The option \f[B]plain\f[R] will output the plain signature data as
defined by the used cryptographic algorithm.
.SH EXAMPLES
.SS Sign and verify with the TPM using the \f[I]endorsement\f[R] hierarchy
.IP
.nf
\f[C]
tpm2_createprimary \-C e \-c primary.ctx

tpm2_create \-G rsa \-u rsa.pub \-r rsa.priv \-C primary.ctx

tpm2_load \-C primary.ctx \-u rsa.pub \-r rsa.priv \-c rsa.ctx

echo \[dq]my message > message.dat

tpm2_sign \-c rsa.ctx \-g sha256 \-m message.dat \-s sig.rssa

tpm2_verifysignature \-c rsa.ctx \-g sha256 \-m message.dat \-s sig.rssa
\f[R]
.fi
.SS Sign with openssl and verify with the TPM
.IP
.nf
\f[C]
# Generate an ECC key
openssl ecparam \-name prime256v1 \-genkey \-noout \-out private.ecc.pem

openssl ec \-in private.ecc.pem \-out public.ecc.pem \-pubout

# Generate a hash to sign (OSSL needs the hash of the message)
echo \[dq]data to sign\[dq] > data.in.raw

sha256sum data.in.raw | awk \[aq]{ print \[dq]000000 \[dq] $1 }\[aq] | \[rs]
xxd \-r \-c 32 > data.in.digest

# Load the private key for signing
tpm2_loadexternal \-Q \-G ecc \-r private.ecc.pem \-c key.ctx

# Sign in the TPM and verify with OSSL
tpm2_sign \-Q \-c key.ctx \-g sha256 \-d data.in.digest \-f plain \-s data.out.signed

openssl dgst \-verify public.ecc.pem \-keyform pem \-sha256 \[rs]
\-signature data.out.signed data.in.raw

# Sign with openssl and verify with TPM
openssl dgst \-sha256 \-sign private.ecc.pem \-out data.out.signed data.in.raw

tpm2_verifysignature \-Q \-c key.ctx \-g sha256 \-m data.in.raw \-f ecdsa \[rs]
\-s data.out.signed
\f[R]
.fi
.SH Returns
.PP
Tools can return any of the following codes:
.IP \[bu] 2
0 \- Success.
.IP \[bu] 2
1 \- General non\-specific error.
.IP \[bu] 2
2 \- Options handling error.
.IP \[bu] 2
3 \- Authentication error.
.IP \[bu] 2
4 \- TCTI related error.
.IP \[bu] 2
5 \- Non supported scheme.
Applicable to tpm2_testparams.
.SH BUGS
.PP
Github Issues (https://github.com/tpm2-software/tpm2-tools/issues)
.SH HELP
.PP
See the Mailing List (https://lists.01.org/mailman/listinfo/tpm2)
